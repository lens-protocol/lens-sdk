type Query {
  challenge(request: ChallengeRequest!): AuthChallengeResult!
  verify(request: VerifyRequest!): Boolean!

  # Get all enabled currencies
  currencies(request: PaginatedOffsetRequest!): PaginatedCurrenciesResult!
  feed(request: FeedRequest!): PaginatedFeedResult!
  feedHighlights(request: FeedHighlightsRequest!): PaginatedFeedHighlightsResult!
  followers(request: FollowersRequest!): PaginatedProfileResult!
  mutualFollowers(request: MutualFollowersRequest!): PaginatedProfileResult!
  following(request: FollowingRequest!): PaginatedProfileResult!
  ownedHandles(request: OwnedHandlesRequest!): PaginatedHandlesResult!
  ping: String!
  rel(request: RelRequest!): Void
  cur(request: CurRequest!): [String!]!
  gdm(request: GdmRequest!): [URL!]!
  gct(request: GctRequest!): [String!]!
  iss(request: PriRequest!): [PrfResult!]!
  intotal(request: InTotalRequest!): Int!
  approvedModuleAllowanceAmount(
    request: ApprovedModuleAllowanceAmountRequest!
  ): [ApprovedAllowanceAmountResult!]!
  generateModuleCurrencyApprovalData(
    request: GenerateModuleCurrencyApprovalDataRequest!
  ): GenerateModuleCurrencyApprovalResult!
  supportedOpenActionModules(request: SupportedModulesRequest!): PaginatedSupportedModules!
  supportedReferenceModules(request: SupportedModulesRequest!): PaginatedSupportedModules!
  supportedOpenActionCollectModules(request: SupportedModulesRequest!): PaginatedSupportedModules!
  supportedFollowModules(request: SupportedModulesRequest!): PaginatedSupportedModules!
  momokaSubmitters: MomokaSubmittersResult!
  momokaSummary: MomokaSummaryResult!
  momokaTransactions(request: MomokaTransactionsRequest!): MomokaTransactionsResult!
  momokaTransaction(request: MomokaTransactionRequest!): MomokaTransaction
  nfts(request: NftsRequest!): PaginatedNftsResult!

  # Get the NFT collections that the given wallet or profileId owns at least one NFT of. Only supports Ethereum and Polygon NFTs. Note excludeFollowers is set to true by default, so the result will not include Lens Follower NFTsunless explicitly requested.
  nftCollections(request: NftCollectionsRequest!): PaginatedNftCollectionsResult!

  # Get the NFT collections that the given two profiles own at least one NFT of.
  mutualNftCollections(request: MutualNftCollectionsRequest!): PaginatedNftCollectionsResult!

  # Get the Lens Profiles that own NFTs from a given collection.
  nftCollectionOwners(request: NftCollectionOwnersRequest!): PaginatedProfileResult!

  # Get the most popular NFT collections. Popularity is based on how many Lens Profiles own NFTs from a given collection.
  popularNftCollections(
    request: PopularNftCollectionsRequest!
  ): PaginatedPopularNftCollectionsResult!
  nftGalleries(request: NftGalleriesRequest!): [NftGallery!]!
  notifications(request: NotificationRequest!): PaginatedNotificationResult!
  poaps(request: UserPoapsQueryRequest!): PaginatedPoapTokenResult!
  mutualPoaps(request: MutualPoapsQueryRequest!): PaginatedPoapEventResult!
  poapHolders(request: PoapHoldersQueryRequest!): PaginatedProfileResult!
  poapEvent(request: PoapEventQueryRequest!): PoapEvent!
  profiles(request: ProfilesRequest!): PaginatedProfileResult!
  profile(request: ProfileRequest!): Profile
  whoActedOnPublication(request: WhoActedOnPublicationRequest!): PaginatedProfileResult!
  profileInterestsOptions: [String!]!
  whoHaveBlocked(request: WhoHaveBlockedRequest!): PaginatedProfileResult!
  profileActionHistory(request: ProfileActionHistoryRequest!): PaginatedProfileActionHistoryResult!
  claimableProfiles: ClaimableProfilesResult!
  claimableStatus: ClaimProfileStatusType!
  exploreProfiles(request: ExploreProfilesRequest!): PaginatedProfileResult!
  invitedProfiles: [InvitedResult!]!
  profileAlreadyInvited(request: AlreadyInvitedCheckRequest!): Boolean!
  profileManagers(request: ProfileManagersRequest!): PaginatedProfileManagersResult!
  profilesManaged(request: ProfilesManagedRequest!): PaginatedProfileResult!
  profileRecommendations(request: ProfileRecommendationsRequest!): PaginatedProfileResult!
  followRevenues(request: FollowRevenueRequest!): FollowRevenueResult!
  searchProfiles(request: ProfileSearchRequest!): PaginatedProfileResult!
  userSigNonces: UserSigNonces!
  publications(request: PublicationsRequest!): PaginatedPublicationsResult!
  publication(request: PublicationRequest!): AnyPublication
  publicationsTags(request: PublicationsTagsRequest!): PaginatedPublicationsTagsResult!
  profileBookmarks(request: ProfileBookmarksRequest!): PaginatedPublicationsResult!
  whoReactedPublication(request: WhoReactedPublicationRequest!): PaginatedWhoReactedResult!
  explorePublications(request: ExplorePublicationRequest!): PaginatedExplorePublicationResult!
  validatePublicationMetadata(
    request: ValidatePublicationMetadataRequest!
  ): PublicationValidateMetadataResult!
  forYou(request: PublicationForYouRequest!): PaginatedForYouResult!
  revenueFromPublications(
    request: RevenueFromPublicationsRequest!
  ): PaginatedRevenueFromPublicationsResult!
  revenueForPublication(request: PublicationRevenueRequest!): PublicationRevenue!
  searchPublications(request: PublicationSearchRequest!): PaginatedPublicationPrimaryResult!
  relayQueues: [RelayQueueResult!]!
  txIdToTxHash(txId: TxId!): TxHash
  lensTransactionStatus(request: LensTransactionStatusRequest!): LensTransactionResult
}

type Mutation {
  authenticate(request: SignedAuthChallenge!): AuthenticationResult!
  refresh(request: RefreshRequest!): AuthenticationResult!
  broadcastOnMomoka(request: BroadcastRequest!): BroadcastMomokaResult!
  broadcastOnchain(request: BroadcastRequest!): RelayResult!
  follow(request: FollowLensManagerRequest!): LensProfileManagerRelayResult!
  unfollow(request: UnfollowRequest!): LensProfileManagerRelayResult!
  createFollowTypedData(
    options: TypedDataOptions
    request: FollowRequest!
  ): CreateFollowBroadcastItemResult!
  createUnfollowTypedData(
    options: TypedDataOptions
    request: UnfollowRequest!
  ): CreateUnfollowBroadcastItemResult!
  handleLinkToProfile(request: HandleLinkToProfileRequest!): LensProfileManagerRelayResult!
  handleUnlinkFromProfile(request: HandleUnlinkFromProfileRequest!): LensProfileManagerRelayResult!
  createHandleLinkToProfileTypedData(
    options: TypedDataOptions
    request: HandleLinkToProfileRequest!
  ): CreateHandleLinkToProfileBroadcastItemResult!
  createHandleUnlinkFromProfileTypedData(
    options: TypedDataOptions
    request: HandleUnlinkFromProfileRequest!
  ): CreateHandleUnlinkFromProfileBroadcastItemResult!
  ach(request: AchRequest!): Void
  hel(request: HelRequest!): Void
  gdi(request: GddRequest!): Void
  gci(request: GciRequest!): Void
  gcr(request: GcrRequest!): Void
  dss(request: PrfRequest!): Void
  nni(request: NniRequest!): Void
  nnv(request: NnvRequest!): Void
  in(request: InRequest!): Void
  setFollowModule(request: SetFollowModuleRequest!): LensProfileManagerRelayResult!
  actOnOpenAction(request: ActOnOpenActionLensManagerRequest!): LensProfileManagerRelayResult!
  legacyCollect(request: LegacyCollectRequest!): LensProfileManagerRelayResult!
  createSetFollowModuleTypedData(
    options: TypedDataOptions
    request: SetFollowModuleRequest!
  ): CreateSetFollowModuleBroadcastItemResult!
  createActOnOpenActionTypedData(
    options: TypedDataOptions
    request: ActOnOpenActionRequest!
  ): CreateActOnOpenActionBroadcastItemResult!
  createLegacyCollectTypedData(
    options: TypedDataOptions
    request: LegacyCollectRequest!
  ): CreateLegacyCollectBroadcastItemResult!
  postOnMomoka(request: MomokaPostRequest!): RelayMomokaResult!
  commentOnMomoka(request: MomokaCommentRequest!): RelayMomokaResult!
  quoteOnMomoka(request: MomokaQuoteRequest!): RelayMomokaResult!
  mirrorOnMomoka(request: MomokaMirrorRequest!): RelayMomokaResult!
  createMomokaQuoteTypedData(request: MomokaQuoteRequest!): CreateMomokaQuoteBroadcastItemResult!
  createMomokaPostTypedData(request: MomokaPostRequest!): CreateMomokaPostBroadcastItemResult!
  createMomokaCommentTypedData(
    request: MomokaCommentRequest!
  ): CreateMomokaCommentBroadcastItemResult!
  createMomokaMirrorTypedData(request: MomokaMirrorRequest!): CreateMomokaMirrorBroadcastItemResult!
  createNftGallery(request: NftGalleryCreateRequest!): NftGalleryId!
  updateNftGalleryInfo(request: NftGalleryUpdateInfoRequest!): Void
  updateNftGalleryOrder(request: NftGalleryUpdateItemOrderRequest!): Void
  updateNftGalleryItems(request: NftGalleryUpdateItemsRequest!): Void
  deleteNftGallery(request: NftGalleryDeleteRequest!): Void
  nftOwnershipChallenge(request: NftOwnershipChallengeRequest!): NftOwnershipChallengeResult!
  addProfileInterests(request: ProfileInterestsRequest!): Void!
  removeProfileInterests(request: ProfileInterestsRequest!): Void!
  dismissRecommendedProfiles(request: DismissRecommendedProfilesRequest!): Void!
  claimProfile(request: ClaimProfileRequest!): CreateProfileWithHandleResult!
  createProfileWithHandle(request: CreateProfileWithHandleRequest!): CreateProfileWithHandleResult!
  inviteProfile(request: InviteRequest!): Void
  block(request: BlockRequest!): LensProfileManagerRelayResult!
  unblock(request: UnblockRequest!): LensProfileManagerRelayResult!
  setProfileMetadata(request: OnchainSetProfileMetadataRequest!): LensProfileManagerRelayResult!
  createOnchainSetProfileMetadataTypedData(
    options: TypedDataOptions
    request: OnchainSetProfileMetadataRequest!
  ): CreateOnchainSetProfileMetadataBroadcastItemResult!
  createChangeProfileManagersTypedData(
    options: TypedDataOptions
    request: ChangeProfileManagersRequest!
  ): CreateChangeProfileManagersBroadcastItemResult!
  createBlockProfilesTypedData(
    options: TypedDataOptions
    request: BlockRequest!
  ): CreateBlockProfilesBroadcastItemResult!
  createUnblockProfilesTypedData(
    options: TypedDataOptions
    request: UnblockRequest!
  ): CreateUnblockProfilesBroadcastItemResult!
  hidePublication(request: HidePublicationRequest!): Void!
  addPublicationNotInterested(request: PublicationNotInterestedRequest!): Void!
  undoPublicationNotInterested(request: PublicationNotInterestedRequest!): Void!
  addPublicationBookmark(request: PublicationBookmarkRequest!): Void!
  removePublicationBookmark(request: PublicationBookmarkRequest!): Void!
  addReaction(request: ReactionRequest!): Void!
  removeReaction(request: ReactionRequest!): Void!
  reportPublication(request: ReportPublicationRequest!): Void!
  quoteOnchain(request: OnchainQuoteRequest!): LensProfileManagerRelayResult!
  postOnchain(request: OnchainPostRequest!): LensProfileManagerRelayResult!
  commentOnchain(request: OnchainCommentRequest!): LensProfileManagerRelayResult!
  mirrorOnchain(request: OnchainMirrorRequest!): LensProfileManagerRelayResult!
  refreshPublicationMetadata(
    request: RefreshPublicationMetadataRequest!
  ): RefreshPublicationMetadataResult!
  createOnchainQuoteTypedData(
    options: TypedDataOptions
    request: OnchainQuoteRequest!
  ): CreateOnchainQuoteBroadcastItemResult!
  createOnchainPostTypedData(
    options: TypedDataOptions
    request: OnchainPostRequest!
  ): CreateOnchainPostBroadcastItemResult!
  createOnchainCommentTypedData(
    options: TypedDataOptions
    request: OnchainCommentRequest!
  ): CreateOnchainCommentBroadcastItemResult!
  createOnchainMirrorTypedData(
    options: TypedDataOptions
    request: OnchainMirrorRequest!
  ): CreateOnchainMirrorBroadcastItemResult!
  idKitPhoneVerifyWebhook(
    request: IdKitPhoneVerifyWebhookRequest!
  ): IdKitPhoneVerifyWebhookResultStatusType!
}
