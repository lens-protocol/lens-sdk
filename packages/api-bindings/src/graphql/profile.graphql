fragment FeeFollowModuleSettings on FeeFollowModuleSettings {
  __typename
  amount {
    ...ModuleFeeAmount
  }
  contractAddress
  recipient
}

fragment ProfileFollowModuleSettings on ProfileFollowModuleSettings {
  __typename
  contractAddress
}

fragment RevertFollowModuleSettings on RevertFollowModuleSettings {
  __typename
  contractAddress
}

fragment ProfileMedia on ProfileMedia {
  ... on NftImage {
    __typename
    contractAddress
    tokenId
    uri
    verified
  }

  ... on MediaSet {
    ...MediaSet
  }
}

fragment Attribute on Attribute {
  __typename
  key
  value
}

fragment ProfileFields on Profile {
  __typename
  id
  name
  bio
  handle
  ownedBy
  attributes {
    ...Attribute
  }
  picture {
    ...ProfileMedia
  }
  coverPicture {
    ...ProfileMedia
  }
  stats {
    __typename
    totalFollowers
    totalFollowing
    totalPosts
  }
  followModule {
    ... on FeeFollowModuleSettings {
      ...FeeFollowModuleSettings
    }

    ... on ProfileFollowModuleSettings {
      ...ProfileFollowModuleSettings
    }

    ... on RevertFollowModuleSettings {
      ...RevertFollowModuleSettings
    }
  }
  dispatcher {
    address
    canUseRelay
  }

  isFollowedByMe(isFinalisedOnChain: true)
  isFollowing(who: $observerId)

  isOptimisticFollowedByMe @client
  location @client
  twitter @client
  website @client
  ownedByMe @client
}

query ProfilesToFollow($observerId: ProfileId) {
  result: recommendedProfiles {
    ...ProfileFields
  }
}

query GetProfile($request: SingleProfileQueryRequest!, $observerId: ProfileId) {
  result: profile(request: $request) {
    ...ProfileFields
  }
}

query GetAllProfilesByOwnerAddress(
  $address: EthereumAddress!
  $observerId: ProfileId
  $limit: LimitScalar!
  $cursor: Cursor
) {
  result: profiles(request: { ownedBy: [$address], limit: $limit, cursor: $cursor }) {
    items {
      ...ProfileFields
    }
    pageInfo {
      ...CommonPaginatedResultInfo
    }
  }
}

mutation CreateProfile($request: CreateProfileRequest!) {
  result: createProfile(request: $request) {
    ... on RelayerResult {
      ...RelayerResult
    }

    ... on RelayError {
      ...RelayError
    }
  }
}

query MutualFollowersProfiles(
  $observerId: ProfileId!
  $viewingProfileId: ProfileId!
  $limit: LimitScalar!
  $cursor: Cursor
) {
  result: mutualFollowersProfiles(
    request: {
      yourProfileId: $observerId
      viewingProfileId: $viewingProfileId
      limit: $limit
      cursor: $cursor
    }
  ) {
    items {
      ...ProfileFields
    }
    pageInfo {
      ...CommonPaginatedResultInfo
    }
  }
}
