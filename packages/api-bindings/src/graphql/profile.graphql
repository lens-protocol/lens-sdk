fragment FeeFollowModuleSettings on FeeFollowModuleSettings {
  __typename
  amount {
    ...ModuleFeeAmount
  }
  contractAddress
  recipient
}

fragment ProfileFollowModuleSettings on ProfileFollowModuleSettings {
  __typename
  contractAddress
}

fragment RevertFollowModuleSettings on RevertFollowModuleSettings {
  __typename
  contractAddress
}

fragment UnknownFollowModuleSettings on UnknownFollowModuleSettings {
  __typename
  contractAddress
}

fragment ProfileMedia on ProfileMedia {
  ... on NftImage {
    __typename
    contractAddress
    tokenId
    uri
    verified
  }

  ... on MediaSet {
    ...MediaSet
  }
}

fragment Attribute on Attribute {
  __typename
  displayType
  key
  value
}

fragment Profile on Profile {
  __typename
  id
  name
  bio
  handle
  ownedBy

  picture {
    ...ProfileMedia
  }
  coverPicture {
    ...ProfileMedia
  }
  stats {
    __typename
    totalFollowers
    totalFollowing
    totalPosts
  }
  __followModule: followModule {
    ... on FeeFollowModuleSettings {
      ...FeeFollowModuleSettings
    }

    ... on ProfileFollowModuleSettings {
      ...ProfileFollowModuleSettings
    }
    ... on RevertFollowModuleSettings {
      ...RevertFollowModuleSettings
    }
    ... on UnknownFollowModuleSettings {
      ...UnknownFollowModuleSettings
    }
  }

  followPolicy @client

  __attributes: attributes {
    ...Attribute
  }
  attributes: attributesMap @client

  dispatcher {
    address
    canUseRelay
  }

  onChainIdentity {
    proofOfHumanity
    ens {
      name
    }
    sybilDotOrg {
      verified
      source {
        twitter {
          handle
        }
      }
    }
    worldcoin {
      isHuman
    }
  }

  isFollowedByMe(isFinalisedOnChain: true)
  isFollowing(who: $observerId)

  isOptimisticFollowedByMe @client
  ownedByMe @client
}

query ProfilesToFollow($observerId: ProfileId) {
  result: recommendedProfiles {
    ...Profile
  }
}

query GetProfile($request: SingleProfileQueryRequest!, $observerId: ProfileId) {
  result: profile(request: $request) {
    ...Profile
  }
}

query GetAllProfilesByOwnerAddress(
  $address: EthereumAddress!
  $observerId: ProfileId
  $limit: LimitScalar!
  $cursor: Cursor
) {
  result: profiles(request: { ownedBy: [$address], limit: $limit, cursor: $cursor }) {
    items {
      ...Profile
    }
    pageInfo {
      ...CommonPaginatedResultInfo
    }
  }
}

mutation CreateProfile($request: CreateProfileRequest!) {
  result: createProfile(request: $request) {
    ... on RelayerResult {
      ...RelayerResult
    }

    ... on RelayError {
      ...RelayError
    }
  }
}

query MutualFollowersProfiles(
  $observerId: ProfileId!
  $viewingProfileId: ProfileId!
  $limit: LimitScalar!
  $cursor: Cursor
) {
  result: mutualFollowersProfiles(
    request: {
      yourProfileId: $observerId
      viewingProfileId: $viewingProfileId
      limit: $limit
      cursor: $cursor
    }
  ) {
    items {
      ...Profile
    }
    pageInfo {
      ...CommonPaginatedResultInfo
    }
  }
}

mutation CreateSetFollowModuleTypedData(
  $request: CreateSetFollowModuleRequest!
  $options: TypedDataOptions
) {
  result: createSetFollowModuleTypedData(request: $request, options: $options) {
    id
    expiresAt
    typedData {
      types {
        SetFollowModuleWithSig {
          name
          type
        }
      }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        followModule
        followModuleInitData
      }
    }
  }
}

mutation CreateSetProfileImageURITypedData(
  $request: UpdateProfileImageRequest!
  $options: TypedDataOptions
) {
  result: createSetProfileImageURITypedData(request: $request, options: $options) {
    id
    expiresAt
    typedData {
      types {
        SetProfileImageURIWithSig {
          name
          type
        }
      }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        imageURI
      }
    }
  }
}

mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {
  result: createSetProfileImageURIViaDispatcher(request: $request) {
    __typename

    ... on RelayerResult {
      ...RelayerResult
    }

    ... on RelayError {
      ...RelayError
    }
  }
}

mutation CreateSetProfileMetadataTypedData(
  $request: CreatePublicSetProfileMetadataURIRequest!
  $options: TypedDataOptions
) {
  result: createSetProfileMetadataTypedData(request: $request, options: $options) {
    id
    expiresAt
    typedData {
      types {
        SetProfileMetadataURIWithSig {
          name
          type
        }
      }
      domain {
        name
        chainId
        version
        verifyingContract
      }
      value {
        nonce
        deadline
        profileId
        metadata
      }
    }
  }
}

mutation CreateSetProfileMetadataViaDispatcher(
  $request: CreatePublicSetProfileMetadataURIRequest!
) {
  result: createSetProfileMetadataViaDispatcher(request: $request) {
    __typename

    ... on RelayerResult {
      ...RelayerResult
    }

    ... on RelayError {
      ...RelayError
    }
  }
}
