/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace Types {
  export type CreateProfileParamsStruct = {
    to: PromiseOrValue<string>;
    followModule: PromiseOrValue<string>;
    followModuleInitData: PromiseOrValue<BytesLike>;
  };

  export type CreateProfileParamsStructOutput = [string, string, string] & {
    to: string;
    followModule: string;
    followModuleInitData: string;
  };
}

export interface PermissonlessCreatorInterface extends utils.Interface {
  functions: {
    'LENS_HANDLES()': FunctionFragment;
    'TOKEN_HANDLE_REGISTRY()': FunctionFragment;
    'addCreditProvider(address)': FunctionFragment;
    'createHandle(address,string)': FunctionFragment;
    'createHandleUsingCredits(address,string)': FunctionFragment;
    'createProfile((address,address,bytes),address[])': FunctionFragment;
    'createProfileUsingCredits((address,address,bytes),address[])': FunctionFragment;
    'createProfileWithHandle((address,address,bytes),string,address[])': FunctionFragment;
    'createProfileWithHandleUsingCredits((address,address,bytes),string,address[])': FunctionFragment;
    'decreaseCredits(address,uint256)': FunctionFragment;
    'getCreditBalance(address)': FunctionFragment;
    'getHandleCreationPrice()': FunctionFragment;
    'getHandleLengthMin()': FunctionFragment;
    'getProfileCreationPrice()': FunctionFragment;
    'getProfileWithHandleCreationPrice()': FunctionFragment;
    'increaseCredits(address,uint256)': FunctionFragment;
    'isCreditProvider(address)': FunctionFragment;
    'isTrustRevoked(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'removeCreditProvider(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setHandleCreationPrice(uint128)': FunctionFragment;
    'setHandleLengthMin(uint8)': FunctionFragment;
    'setProfileCreationPrice(uint128)': FunctionFragment;
    'setTrustRevoked(address,bool)': FunctionFragment;
    'transferFromKeepingDelegates(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawFunds()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'LENS_HANDLES'
      | 'TOKEN_HANDLE_REGISTRY'
      | 'addCreditProvider'
      | 'createHandle'
      | 'createHandleUsingCredits'
      | 'createProfile'
      | 'createProfileUsingCredits'
      | 'createProfileWithHandle'
      | 'createProfileWithHandleUsingCredits'
      | 'decreaseCredits'
      | 'getCreditBalance'
      | 'getHandleCreationPrice'
      | 'getHandleLengthMin'
      | 'getProfileCreationPrice'
      | 'getProfileWithHandleCreationPrice'
      | 'increaseCredits'
      | 'isCreditProvider'
      | 'isTrustRevoked'
      | 'owner'
      | 'removeCreditProvider'
      | 'renounceOwnership'
      | 'setHandleCreationPrice'
      | 'setHandleLengthMin'
      | 'setProfileCreationPrice'
      | 'setTrustRevoked'
      | 'transferFromKeepingDelegates'
      | 'transferOwnership'
      | 'withdrawFunds',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'LENS_HANDLES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TOKEN_HANDLE_REGISTRY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addCreditProvider',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createHandle',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createHandleUsingCredits',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createProfile',
    values: [Types.CreateProfileParamsStruct, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createProfileUsingCredits',
    values: [Types.CreateProfileParamsStruct, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createProfileWithHandle',
    values: [Types.CreateProfileParamsStruct, PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'createProfileWithHandleUsingCredits',
    values: [Types.CreateProfileParamsStruct, PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseCredits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCreditBalance',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getHandleCreationPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getHandleLengthMin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProfileCreationPrice', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getProfileWithHandleCreationPrice',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseCredits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isCreditProvider',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isTrustRevoked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeCreditProvider',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setHandleCreationPrice',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHandleLengthMin',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setProfileCreationPrice',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTrustRevoked',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFromKeepingDelegates',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawFunds', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'LENS_HANDLES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TOKEN_HANDLE_REGISTRY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCreditProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createHandle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createHandleUsingCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createProfile', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createProfileUsingCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createProfileWithHandle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createProfileWithHandleUsingCredits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decreaseCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCreditBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHandleCreationPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHandleLengthMin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProfileCreationPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getProfileWithHandleCreationPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'increaseCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCreditProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustRevoked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCreditProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHandleCreationPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHandleLengthMin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProfileCreationPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTrustRevoked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFromKeepingDelegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFunds', data: BytesLike): Result;

  events: {
    'CreditBalanceChanged(address,uint256)': EventFragment;
    'HandleCreationPriceChanged(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ProfileCreationPriceChanged(uint256)': EventFragment;
    'TrustStatusChanged(address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreditBalanceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HandleCreationPriceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProfileCreationPriceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TrustStatusChanged'): EventFragment;
}

export interface CreditBalanceChangedEventObject {
  creditAddress: string;
  remainingCredits: BigNumber;
}
export type CreditBalanceChangedEvent = TypedEvent<
  [string, BigNumber],
  CreditBalanceChangedEventObject
>;

export type CreditBalanceChangedEventFilter = TypedEventFilter<CreditBalanceChangedEvent>;

export interface HandleCreationPriceChangedEventObject {
  newPrice: BigNumber;
}
export type HandleCreationPriceChangedEvent = TypedEvent<
  [BigNumber],
  HandleCreationPriceChangedEventObject
>;

export type HandleCreationPriceChangedEventFilter =
  TypedEventFilter<HandleCreationPriceChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface ProfileCreationPriceChangedEventObject {
  newPrice: BigNumber;
}
export type ProfileCreationPriceChangedEvent = TypedEvent<
  [BigNumber],
  ProfileCreationPriceChangedEventObject
>;

export type ProfileCreationPriceChangedEventFilter =
  TypedEventFilter<ProfileCreationPriceChangedEvent>;

export interface TrustStatusChangedEventObject {
  targetAddress: string;
  trustRevoked: boolean;
}
export type TrustStatusChangedEvent = TypedEvent<[string, boolean], TrustStatusChangedEventObject>;

export type TrustStatusChangedEventFilter = TypedEventFilter<TrustStatusChangedEvent>;

export interface PermissonlessCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PermissonlessCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LENS_HANDLES(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_HANDLE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    addCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createHandle(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createHandleUsingCredits(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createProfile(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createProfileUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createProfileWithHandle(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createProfileWithHandleUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCreditBalance(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getHandleCreationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHandleLengthMin(overrides?: CallOverrides): Promise<[number]>;

    getProfileCreationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProfileWithHandleCreationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isCreditProvider(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHandleCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHandleLengthMin(
      newMinLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProfileCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      trustRevoked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFromKeepingDelegates(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  LENS_HANDLES(overrides?: CallOverrides): Promise<string>;

  TOKEN_HANDLE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  addCreditProvider(
    creditProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createHandle(
    to: PromiseOrValue<string>,
    handle: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createHandleUsingCredits(
    to: PromiseOrValue<string>,
    handle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createProfile(
    createProfileParams: Types.CreateProfileParamsStruct,
    delegatedExecutors: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createProfileUsingCredits(
    createProfileParams: Types.CreateProfileParamsStruct,
    delegatedExecutors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createProfileWithHandle(
    createProfileParams: Types.CreateProfileParamsStruct,
    handle: PromiseOrValue<string>,
    delegatedExecutors: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createProfileWithHandleUsingCredits(
    createProfileParams: Types.CreateProfileParamsStruct,
    handle: PromiseOrValue<string>,
    delegatedExecutors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseCredits(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCreditBalance(
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getHandleLengthMin(overrides?: CallOverrides): Promise<number>;

  getProfileCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getProfileWithHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  increaseCredits(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isCreditProvider(
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isTrustRevoked(
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeCreditProvider(
    creditProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHandleCreationPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHandleLengthMin(
    newMinLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProfileCreationPrice(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTrustRevoked(
    targetAddress: PromiseOrValue<string>,
    trustRevoked: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFromKeepingDelegates(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    LENS_HANDLES(overrides?: CallOverrides): Promise<string>;

    TOKEN_HANDLE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    addCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createHandle(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createHandleUsingCredits(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createProfile(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createProfileUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createProfileWithHandle(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { profileId: BigNumber; handleId: BigNumber }>;

    createProfileWithHandleUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    decreaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCreditBalance(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getHandleLengthMin(overrides?: CallOverrides): Promise<number>;

    getProfileCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getProfileWithHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isCreditProvider(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setHandleCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHandleLengthMin(
      newMinLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProfileCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      trustRevoked: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferFromKeepingDelegates(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CreditBalanceChanged(address,uint256)'(
      creditAddress?: PromiseOrValue<string> | null,
      remainingCredits?: null,
    ): CreditBalanceChangedEventFilter;
    CreditBalanceChanged(
      creditAddress?: PromiseOrValue<string> | null,
      remainingCredits?: null,
    ): CreditBalanceChangedEventFilter;

    'HandleCreationPriceChanged(uint256)'(newPrice?: null): HandleCreationPriceChangedEventFilter;
    HandleCreationPriceChanged(newPrice?: null): HandleCreationPriceChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'ProfileCreationPriceChanged(uint256)'(newPrice?: null): ProfileCreationPriceChangedEventFilter;
    ProfileCreationPriceChanged(newPrice?: null): ProfileCreationPriceChangedEventFilter;

    'TrustStatusChanged(address,bool)'(
      targetAddress?: PromiseOrValue<string> | null,
      trustRevoked?: null,
    ): TrustStatusChangedEventFilter;
    TrustStatusChanged(
      targetAddress?: PromiseOrValue<string> | null,
      trustRevoked?: null,
    ): TrustStatusChangedEventFilter;
  };

  estimateGas: {
    LENS_HANDLES(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_HANDLE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    addCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createHandle(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createHandleUsingCredits(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createProfile(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createProfileUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createProfileWithHandle(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createProfileWithHandleUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCreditBalance(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getHandleLengthMin(overrides?: CallOverrides): Promise<BigNumber>;

    getProfileCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getProfileWithHandleCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isCreditProvider(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setHandleCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setHandleLengthMin(
      newMinLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProfileCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      trustRevoked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFromKeepingDelegates(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFunds(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    LENS_HANDLES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_HANDLE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createHandle(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createHandleUsingCredits(
      to: PromiseOrValue<string>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createProfile(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createProfileUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createProfileWithHandle(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createProfileWithHandleUsingCredits(
      createProfileParams: Types.CreateProfileParamsStruct,
      handle: PromiseOrValue<string>,
      delegatedExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCreditBalance(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getHandleCreationPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHandleLengthMin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfileCreationPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfileWithHandleCreationPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseCredits(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isCreditProvider(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCreditProvider(
      creditProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHandleCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHandleLengthMin(
      newMinLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProfileCreationPrice(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTrustRevoked(
      targetAddress: PromiseOrValue<string>,
      trustRevoked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFromKeepingDelegates(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
